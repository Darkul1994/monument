0 info it worked if it ends with ok
1 verbose cli [ '/usr/local/bin/node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@2.14.4
3 info using node@v4.1.1
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/Users/designfrontier/projects/monumentjs',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /Users/designfrontier/.npm/monument/2.0.4/package.tgz not in flight; packing
9 verbose tar pack [ '/Users/designfrontier/.npm/monument/2.0.4/package.tgz',
9 verbose tar pack   '/Users/designfrontier/projects/monumentjs' ]
10 verbose tarball /Users/designfrontier/.npm/monument/2.0.4/package.tgz
11 verbose folder /Users/designfrontier/projects/monumentjs
12 info prepublish monument@2.0.4
13 verbose addLocalTarball adding from inside cache /Users/designfrontier/.npm/monument/2.0.4/package.tgz
14 silly cache afterAdd monument@2.0.4
15 verbose afterAdd /Users/designfrontier/.npm/monument/2.0.4/package/package.json not in flight; writing
16 verbose afterAdd /Users/designfrontier/.npm/monument/2.0.4/package/package.json written
17 silly publish { name: 'monument',
17 silly publish   version: '2.0.4',
17 silly publish   description: 'evented routing for nodejs for use on the server and in the client. Isomorphic!',
17 silly publish   main: 'index.js',
17 silly publish   scripts:
17 silly publish    { start: 'node app.js',
17 silly publish      test: 'gulp test',
17 silly publish      codeship: 'gulp test && gulp coveralls' },
17 silly publish   repository:
17 silly publish    { type: 'git',
17 silly publish      url: 'https://github.com/designfrontier/monumentjs' },
17 silly publish   bugs: { url: 'https://github.com/designfrontier/monumentjs/issues' },
17 silly publish   author: { name: 'Daniel Sellers', email: 'daniel@designfrontier.net' },
17 silly publish   license: 'MIT',
17 silly publish   keywords:
17 silly publish    [ 'nodejs',
17 silly publish      'events',
17 silly publish      'routing',
17 silly publish      'isomorphic',
17 silly publish      'browser',
17 silly publish      'event',
17 silly publish      'eda',
17 silly publish      'server',
17 silly publish      'http',
17 silly publish      'web',
17 silly publish      'webserver',
17 silly publish      'framework',
17 silly publish      'api',
17 silly publish      'app',
17 silly publish      'rest',
17 silly publish      'restful' ],
17 silly publish   dependencies:
17 silly publish    { dot: '^1.0.3',
17 silly publish      etag: '^1.7.0',
17 silly publish      glob: '^5.0.15',
17 silly publish      harken: '^1.0.4',
17 silly publish      'media-typer': '^0.3.0',
17 silly publish      mime: '^1.3.4',
17 silly publish      'raw-body': '^2.1.4' },
17 silly publish   devDependencies:
17 silly publish    { chai: '^3.3.0',
17 silly publish      chalk: '^1.1.1',
17 silly publish      gulp: '^3.9.0',
17 silly publish      'gulp-coveralls': '^0.1.4',
17 silly publish      'gulp-istanbul': '^0.10.1',
17 silly publish      'gulp-mocha': '^2.1.3',
17 silly publish      minimist: '^1.2.0',
17 silly publish      'v8-profiler': '^5.3.2' },
17 silly publish   engines: { node: '^4.0.0' },
17 silly publish   contributors:
17 silly publish    [ { name: 'Bruce Campbell', email: 'campbellbd@ldschurch.org' },
17 silly publish      { name: 'Cory Brown', email: 'oh.wise.man@gmail.com' },
17 silly publish      { name: 'Daniel Sellers', email: 'd.sellers@ldschurch.org' },
17 silly publish      { name: 'Daniel Sellers', email: 'daniel@designfrontier.net' } ],
17 silly publish   readme: '# monument\n\n`monument` is a super light event routed isomorphic nodejs framework.\n\n[![NPM](https://nodei.co/npm/monument.png?downloadRank=true&stars=true)](https://nodei.co/npm/monument/)\n\n![build status](https://codeship.com/projects/881ed090-9c54-0132-655c-263ab955f60c/status?branch=master) [![david-dm](https://david-dm.org/ansble/monument.svg)](https://david-dm.org/ansble/monument)\n\n[![Coverage Status](https://coveralls.io/repos/ansble/monument/badge.svg?branch=master)](https://coveralls.io/r/ansble/monument?branch=master)\n\n## v2.0.0!\nDespite it being a major release this is actually a pretty bland one. It\'s a major release because monument 2+ requires you to be running on node > 4.0.0. It is a rewrite and cleanup in ES6 syntax.\n\nThere will likely be a few more tweaks over the next couple of days, but this is a nice stable release as is.\n\n### Performance\nOne of the things that did change was how route detection works. It now uses better Array functions instead of forEach, and filter in most places. Array.find has taken over the routing functions which means they exit quicker. This is a minor performance tweak, and the chances of you noticing it are tiny. But, for apps with large route lists this will make a difference, maybe even a big one.\n\n### Testing\nWe are now over 80% global coverage and have a rule in the build to require we hit 80%. So going forward that number will move upwards and the system as a whole will be more stable.\n\n### Components\nWe now use [harken](https://github.com/ansble/harken) to handle events. Pulled it out of this code base and made it its own thing, much like event-state in a previous release. Makes the codebase simpler. This also means that you can use the same event system in your clients now. Which is pretty sweet.\n\nThis release breaks the router into a whole lot of smaller components. This is for testability, and to make it easier to reason about what is happening in the router. Before this version the router was a black box with terrible testability.\n\n### Better commmit messages!\nThe git log is now much nicer...\n\n## Changes in 1.5.0\n\n`parser` The `monument.parser` function now returns `null` if an error occurs during parsing. If you would like to see the error you can subscribe to the `error:parse` event which recieves the contents of the error or grab the optional second param `err` which only exists when an error has occured. The recommended action at this point is to return an error to the user, terminating the connection with a `connection.req.end`. One way to achieve this would be by `events.emit(\'error:500\', {message: \'The data you sent wasn\'t properly formatted\', connection: connection});`\n\nUpdated to latest version (0.3.5) of [event-state](https://github.com/ansble/event-state) which fixed some bugs in its implementation.\n\nExpanded test suite... (yay!)\n\nWe also added compression for non-static resources. It is turned on and off with the same compression flag as static file compression.\n\nAdded max-age and other cache headers in addition to etags to make PageSpeed and ySlow happy. Works very nicely.\n\nComplete rework of the startup system. Modularized and will be pluggable in the future. Right now it handles the cleanup of static files, which makes development a lot nicer. It also Compiles the dot.js templates and gets them ready for use. The last thing that it does is include the etag system for handling etag creation. Basically all the same startup tasks just handled in a modular way.\n\nHEAD requests are now supported correctly for static resources. If you want to use HEAD requests in your applications then you can handle them very easily from the routes.json.\n\nThat\'s the majority of the changes for 1.5.0!\n\n\n## New in 1.4.0\nThis was essentially a patch that turned into a minor release. We found some issues with using the builtin node event system that seemed to be revving up memory usage like crazy and so we rewrote the whole event system to use a custom one. The API is identical to 1.3.0 but the 99% rewrite of a core module felt more like a minor release then a patch release. So the new for this release is pretty much transparent, but it is lower overhead for your application.\n\nAlso updated all dependencies to latest.\n\n## New in 1.3.0!\n\n### etags\nHash based etags are now available by default. You can turn them off by adding `\'etags\': false` to your config object (passed into `monument.server`).\n\nThey are generated and used for all static files, and all responses that use `res.send`. One of the cooler things we did was have monumen cache the etags for static assets. That means they get created the first time they are requested after the server starts up, and for all subsequent requests the etag is pulled from an in memory cache so that the file i/o is only done if there is a reason to stream the file to the client. Makes them fast and light!\n\n### `.send()`\nOne of the things that I heard from several users was the lack of response.send was confusing for them. So we added it! It also allows etags and automatically handles strings or objects correctly. Basically it is a nice layer of sugar around res.end and res.setHeaders that correctly handles mimetype and serializing the data if needed.\n\nShould make developing in monumet just a little easier.\n\n### required events (state machine)\nWe pulled in [event-state](http://github.com/ansble/event-state) to provide a simple way to do something after multiple events have been fired. Its syntax is very simliar to `Promise.all` and it takes an array of events to listen for.\n\n```\n  emitter.required([\'event-1\', \'event-2\', \'event-3\'], function (dataArray) {\n    //do something here when all three events have triggered\n  });\n```\n\n### compression for static files\nDeflate and gzip compression of static files is handled according to the accepts header from the client. We do it in a pretty slick way that writes out the compressed file to the file system at first request, reducing the computing required for serving them on subsequent requests as compressed files. Compression for non-static files is scheduled for the next release (1.4).\n\nYou can turn compression on or off in the config object described below.\n\n## How To Get Started\n\n### Config object and the server\n\nWhen you create your server it takes a config object that allows you to pass in some options for your particular environment. It looks like this and these are the default values:\n\n```\n{\n  port: 3000 // the port for the server to run on\n  , compress: true // turns on or off compression for static files (deflate/gzip)\n  , routePath: \'./routes\' // the folder your routes live in\n  , templatePath: \'./templates\' // the folder where your templates live\n  , dotjs: {\n    //dotjs defaults\n    // see [doT.js documentation](https://olado.github.io/doT/index.html) for available options.\n  }\n  , publicPath: \'./public\' // the folder where your static files live\n  , maxAge: 31536000 // time to cache static files client side in milliseconds\n  , etags: true // turns on or off etag generation and headers\n}\n```\n\nAll the values are optional. It is used like this to create a server (heroku example of port):\n\n```\nvar monument = require(\'monument\');\n\nmonument.server({\n        routePath: \'./routes\'\n        , templatePath: \'./templates\'\n        , publicPath: \'./public\'\n        , port: process.env.PORT || 3000\n      });\n```\n\n### Setting up routes\n\nThe easy way to do this is with the [monument-cli](https://github.com/ansble/monument-cli)and `yo monument-cli:routes` command. It takes your `routes.json` file and stubbs out all the route handlers and files for you.\n\nWhichever way you decide to do it the first step is to add your route to the `routes.json` file. It looks like this:\n\n```\n{\n  "/": ["get"],\n  "/sign-up": ["get", "post"],\n  "/member/:username": ["get"]\n}\n```\n\nSo you have a key (the route) and then an array of allowed verbs for that route. This means that a request to a disallowed verb will not be handled. It returns a 404 just like a request to a route path does.\n\nYou are allowed to specify routes with params in them as demonstrated by the `/member/:username` route above. This means that when someone requests that route with something like `/member/designfrontier` there will be a variable named `username` included in the variable req.params (req.params.username will equal \'designfrontier\' in this example). You can use that variable in the event handler for the route. Oh yeah, that will be handled by the \'route:/member/:username:get\' event. Hopefully that makes sense.\n\nThe structure of a route event is: \'route:/path/to/resource:http-verb\'. So if you want to listen to those events for something, route handling, logging, jumping jack counter, whatever you just listen to the exposed emitter and you are good to go.\n\nThe route events recieve an object right now, often called connection, that looks like this\n\n```\n{\n  res: response,\n  req: request,\n  params: the url parameters as an object,\n  query: the queryparams as an object\n}\n```\n\nthese are the request and response objects from node. The other thing of interest are the other parts of the connection object, the params, and query objects. `params` contains the key/value pairs from the url params laid out with `:name` notation in the path. Lastly you get the `query` object which is the key/value pairs found in any queryparams on the path.\n\n#### put, post, update and parsing out body\n\nAt some point you are going to need to deal with body data from a form or ajax request. This is one of the areas where monument diverges from the mainstream you may be used to in server side js. We expose a parser function that you use like this in the event handler for the route you want:\n\n```\nvar parser = require(\'monument\').parser;\n\nevents.on(\'route:/join:post\', function (connection) {\n  //parse out the request body\n  parser(connection, function (err, body) {\n    console.log(err, body);\n    connection.res.end(\'route /join now responding to post requests\');\n  });\n});\n```\n\n`body` is the parsed body of the request and is passed into the callback function.\n\n### Data and Events\n\nMore to come... but think about the idea of resource pooling and individual data modules that front DSLs.\n\n### Static Assetts\n\nStatic assetts live in `/public` and can be organized in whatever way you see fit. All folders within public become routes on root. So, `/public/compnents` answers to requests on `/components` when the server is running. These static routes take precedent over evented routes and essentially prevent non-static route handling from happening on them.\n\nYou can interact with these routes through events to a certain degree. They raise a `static:served` with a payload of the file url that was served, when the file exists. If the file does not exist they raise a `static:missing` with the file url as payload. This will let you log and handle these conditions as needed.\n\n## Contributing\nContributing is simple :-)\n\nFeel free to edit away, just make sure that everything still passes its tests `npm test` and add new tests in `*_test.js` files. (For a file named merckx.js you would create a merckx_test.js file that contains the tests.) Once you have done that then open a pull request and we\'ll get it pulled in.\n\nWhen we do the next release your name will be added to the AUTHORS file... you know, because you\'re an author now.\n',
17 silly publish   readmeFilename: 'readme.md',
17 silly publish   gitHead: '506cd57332163f2e91188ba04733929e598d2cd3',
17 silly publish   homepage: 'https://github.com/designfrontier/monumentjs',
17 silly publish   _id: 'monument@2.0.4',
17 silly publish   _shasum: 'f027bca8a8bc11115a92b662c63f5b13d7603f95',
17 silly publish   _from: '.' }
18 verbose getPublishConfig undefined
19 silly mapToRegistry name monument
20 silly mapToRegistry using default registry
21 silly mapToRegistry registry http://registry.npmjs.org/
22 silly mapToRegistry uri http://registry.npmjs.org/monument
23 verbose publish registryBase http://registry.npmjs.org/
24 silly publish uploading /Users/designfrontier/.npm/monument/2.0.4/package.tgz
25 verbose request uri http://registry.npmjs.org/monument
26 verbose request sending authorization for write operation
27 info attempt registry request try #1 at 6:01:25 PM
28 verbose request id a8ccbc8765209b00
29 http request PUT http://registry.npmjs.org/monument
30 http 200 http://registry.npmjs.org/monument
31 verbose request invalidating /Users/designfrontier/.npm/registry.npmjs.org/monument on PUT
32 info publish monument@2.0.4
33 verbose stack Error: write EPIPE
33 verbose stack     at Object.exports._errnoException (util.js:837:11)
33 verbose stack     at exports._exceptionWithHostPort (util.js:860:20)
33 verbose stack     at WriteWrap.afterWrite (net.js:760:14)
34 verbose cwd /Users/designfrontier/projects/monumentjs
35 error Darwin 15.0.0
36 error argv "/usr/local/bin/node" "/usr/local/bin/npm" "publish"
37 error node v4.1.1
38 error npm  v2.14.4
39 error code EPIPE
40 error errno EPIPE
41 error syscall write
42 error write EPIPE
43 error If you need help, you may report this error at:
43 error     <https://github.com/npm/npm/issues>
44 verbose exit [ 1, true ]
